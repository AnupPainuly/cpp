//try-throw-catch for dynamic allocation of an array using new operator in Cpp
#include<iostream>
using namespace std;
int main(void){
  int i,n,*ptr=NULL;
  cout<<"How many elements you want in the array: "<<endl;
  cin>>n;
  try{
  ptr=new int[n]; //dynamic allocation of an array in C is written as ptr=(int*)malloc(n*sizeof(int))
  //accepting elements for an array
  cout<<"Enter the array elements: "<<endl;
  for(i=0;i<n;i++){
    cin>>ptr[i];
  }//end of for
  //displaying elements of an array
  cout<<"Elements of an array are: "<<endl;
  for(i=0;i<n;i++){
    cout<<"["<<ptr[i]<<"]";
  }//end of for

  delete [] ptr; //freeing the heap memory to avod memory leakage
  
  }
  catch(bad_alloc){ //throw is automatically generated by the compiler in case of dynamic allocation and it is called bad_alloc
    cout<<"unable to allocate memory in heap"<<endl;
    cout<<"Inside bad alloc catch"<<endl;
  }
  catch(...){ //generic catch or ellipse 
    cout<<"unable to allocate memory in heap"<<endl; 
    cout<<"Inside generic catch block"<<endl;
  }
}
